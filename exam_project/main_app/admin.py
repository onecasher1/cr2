from django.contrib import admin
from .models import ABExam # Импортируем нашу модель

# Используем декоратор @admin.register для регистрации модели в админке.
# Это более "питонический" способ, чем admin.site.register(ABExam, ABExamAdmin).
@admin.register(ABExam) # Замените ABExam на ваше название модели
class ABExamAdmin(admin.ModelAdmin):
    """
    Класс для настройки отображения и поведения модели ABExam в админ-панели Django.
    """

    # list_display - какие поля модели отображать в списке записей.
    list_display = (
        'exam_name',
        'exam_date',
        'created_at',
        'is_public',
        'get_examinees_count' # Пользовательский метод для отображения кол-ва экзаменуемых
    )

    # list_filter - по каким полям можно будет фильтровать записи справа в админке.
    list_filter = (
        'is_public',      # Фильтр по булеву полю "Опубликовано"
        'created_at',     # Фильтр по дате создания
        'exam_date'       # Фильтр по дате проведения экзамена
    )

    # search_fields - по каким полям будет работать строка поиска.
    # 'exam_name' - поиск по названию экзамена.
    # 'examinees__email' - поиск по email пользователей, связанных через M2M поле 'examinees'.
    #                      Двойное подчеркивание (__) используется для доступа к полям связанных моделей.
    # 'examinees__username' - аналогично, поиск по имени пользователя.
    search_fields = (
        'exam_name',
        'examinees__email',
        'examinees__username'
    )

    # date_hierarchy - добавляет навигацию по датам под строкой поиска.
    #                  Удобно для быстрого перехода к записям за определенный год/месяц/день.
    date_hierarchy = 'exam_date' # Используем поле "Дата проведения экзамена"

    # filter_horizontal - изменяет стандартный виджет для ManyToManyField
    #                     на более удобный (два списка: "доступные" и "выбранные" с возможностью фильтрации).
    #                     Альтернатива: filter_vertical (списки располагаются друг под другом).
    filter_horizontal = ('examinees',)

    # fieldsets - позволяет группировать поля на странице редактирования/добавления записи.
    #             Каждый кортеж в списке fieldsets - это одна секция.
    #             Первый элемент кортежа - заголовок секции (None, если не нужен).
    #             Второй элемент - словарь с опциями, где 'fields' - список полей в этой секции.
    #             'classes': ('collapse',) - делает секцию сворачиваемой.
    fieldsets = (
        (None, { # Основная информация без заголовка секции
            'fields': ('exam_name', 'exam_date', 'is_public')
        }),
        ('Задание и участники', { # Секция "Задание и участники"
            'classes': ('collapse',), # Секция будет по умолчанию свернута
            'fields': ('exam_image', 'examinees'),
        }),
        ('Служебная информация', { # Секция для служебной информации
            'fields': ('created_at',), # Поле будет только для чтения
        }),
    )

    # readonly_fields - поля, которые будут отображаться, но их нельзя будет редактировать.
    readonly_fields = ('created_at',) # Дата создания устанавливается автоматически

    # Можно добавлять пользовательские методы для отображения в list_display
    def get_examinees_count(self, obj):
        """
        Возвращает количество пользователей, назначенных на данный экзамен.
        'obj' - это экземпляр модели ABExam.
        """
        return obj.examinees.count()
    # short_description - заголовок для этой колонки в админке.
    get_examinees_count.short_description = 'Кол-во экзаменуемых'

# Если не используете декоратор, то регистрация выглядит так:
# admin.site.register(ABExam, ABExamAdmin)